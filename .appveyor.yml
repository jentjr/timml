os: Visual Studio 2015

environment:
  global:
      MINGW_64: C:\mingw-64\x86_64-6.3.0-posix-seh-rt_v5-rev1\ming64\bin

  matrix:
    - PYTHON: C:\Miniconda36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64
    
    - PYTHON: C:\Miniconda35-x64
      PYTHON_VERSION: 3.5
      PYTHON_ARCH: 64

matrix:
  fast_finish: true

init:
  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH% %HOME%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
      # If there is a newer build queued for the same PR, cancel this one.
      # The AppVeyor 'rollout builds' option is supposed to serve the same
      # purpose but it is problematic because it tends to cancel builds pushed
      # directly to master instead of just PR builds (or the converse).
      # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }
  - ps: |
      If (($env:SKIP_NOTAG -eq "true") -and ($env:APPVEYOR_REPO_TAG -ne "true")) {
          Write-Host "Skipping build, not at a tag."
          Exit-AppveyorBuild
      }

install:
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PYTHON%\Library\bin;%PATH%
  - python --version
  - >-
          %CMD_IN_ENV%
          python -c "import sys, platform, struct;
          print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  - conda config --set always_yes yes
  - conda config --add channels conda-forge
  - conda update -q conda
  - conda info -a
  - conda install numpy scipy matplotlib

build_script:
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      If ($PYTHON_ARCH -eq 32) {
          $MINGW = $env:MINGW_32 
      } Else {
          $MINGW = $env:MINGW_64 
      }
      $env:Path += ";$MINGW"
  - "ECHO %PATH%"
  - python setup.py build_ext --compiler=mingw32 --fcompiler=gfortran 
  - python setup.py install

test_script:
  - python -c 'import timml; timml.version.__version__;'
