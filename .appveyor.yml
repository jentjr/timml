# Modified https://github.com/scipy/scipy/blob/master/appveyor.yml

clone_depth: 50

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
      MINGW_32: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin
      MINGW_64: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\ming64\bin
      APPVEYOR_SAVE_CACHE_ON_ERROR: true
      APPVEYOR_SKIP_FINALIZE_ON_EXIT: true

  matrix:
    - PYTHON: C:\Miniconda36
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 32
      
    - PYTHON: C:\Miniconda36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64

init:
  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""
  
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH% %HOME%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
      # If there is a newer build queued for the same PR, cancel this one.
      # The AppVeyor 'rollout builds' option is supposed to serve the same
      # purpose but it is problematic because it tends to cancel builds pushed
      # directly to master instead of just PR builds (or the converse).
      # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          Write-Host "There are newer queued builds for this pull request, skipping build."
          Exit-AppveyorBuild
        }
  - ps: |
      If (($env:SKIP_NOTAG -eq "true") -and ($env:APPVEYOR_REPO_TAG -ne "true")) {
          Write-Host "Skipping build, not at a tag."
          Exit-AppveyorBuild
      }

install:
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"
  # Prepared newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PYTHON\Library\bin;%PATH%
  - python --version
  - >-
          %CMD_IN_ENV%
          python -c "import sys, platform, struct;
          print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"
  
  # configure conda and install dependencies
  - conda config --set always_yes yes
  - conda config --add channels conda-forge
  - conda update -q conda
  - conda install numpy scipy matplotlib jupyter pytest
  - conda info -a

build_script:
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      If ($PYTHON_ARCH -eq 32) {
          $MINGW = $env:MINGW_32 
      } Else {
          $MINGW = $env:MINGW_64 
      }
      $env:Path += ";$MINGW"
      python setup.py build_ext --inplace --fcompiler=gnu95 --compiler=mingw32
      python setup.py install

test_script:
  - pytest

after_build:
  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete
  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"
